package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"tg-bot/api"
	"tg-bot/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func HandleMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

	if update.Message.Text == "/start" {
		msg.Text = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\nüìç –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ú–æ—Å–∫–≤–∞\", \"–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\")\nüó∫Ô∏è –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π"
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButtonLocation("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"),
			),
		)
	} else {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
		go HandleCity(bot, update)
	}

	bot.Send(msg)
}

// HandleCity –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –≥–æ—Ä–æ–¥—É
func HandleCity(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

	cityName := update.Message.Text

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –≥–æ—Ä–æ–¥—É —á–µ—Ä–µ–∑ API
	attractions, err := api.GetAttractionsByCity(cityName)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: %v", err)
		msg.Text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
	} else if len(attractions) == 0 {
		msg.Text = fmt.Sprintf("üèôÔ∏è –í –≥–æ—Ä–æ–¥–µ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π üò¢\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.", cityName)
	} else {
		msg.Text = fmt.Sprintf("üèôÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ %s:\n\n%s", cityName, formatAttractionsList(attractions))
		msg.ReplyMarkup = createAttractionsKeyboard(attractions)
	}

	bot.Send(msg)
}

// HandleLocation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
func HandleLocation(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –ª–æ–∫–∞—Ü–∏–∏
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–¥–∏—É—Å (0.001) –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
	attractions, err := api.GetAttractionsByLocation(
		update.Message.Location.Latitude,
		update.Message.Location.Longitude,
		0.001, // –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–¥–∏—É—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
	)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: %v", err)
		msg.Text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
	} else if len(attractions) == 0 {
		msg.Text = "–†—è–¥–æ–º –Ω–µ—Ç –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞."
	} else {
		msg.Text = "–†—è–¥–æ–º —Å –≤–∞–º–∏:\n" + formatAttractionsList(attractions)
		msg.ReplyMarkup = createAttractionsKeyboard(attractions)
	}

	bot.Send(msg)
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∏ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
func HandleCallback(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
	bot.Send(callback)

	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "")
	if strings.HasPrefix(update.CallbackQuery.Data, "attraction_") {
		idStr := strings.TrimPrefix(update.CallbackQuery.Data, "attraction_")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞"
		} else {
			detail, err := api.GetAttractionDetail(id)
			if err != nil {
				msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API"
			} else {
				msg.Text = formatAttractionDetail(detail)
			}
		}
	}

	bot.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func formatAttractionsList(attrs []models.Attraction) string {
	if len(attrs) == 0 {
		return "–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
	}

	var builder strings.Builder
	for i, attr := range attrs {
		ratingText := ""
		if attr.Rating > 0 {
			ratingText = fmt.Sprintf(" (‚≠ê %.1f)", attr.Rating)
		}
		builder.WriteString(fmt.Sprintf("%d. %s%s\n", i+1, attr.Name, ratingText))

		// –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
		if attr.Address != "" {
			builder.WriteString(fmt.Sprintf("   üìç %s\n", attr.Address))
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
		if attr.Description != "" {
			builder.WriteString(fmt.Sprintf("   üìù %s\n", attr.Description))
		}

		builder.WriteString("\n")
	}
	return builder.String()
}

func formatAttractionDetail(detail models.AttractionDetail) string {
	var builder strings.Builder

	builder.WriteString(fmt.Sprintf("üèõÔ∏è *%s*\n\n", detail.Name))

	if detail.Address != "" {
		builder.WriteString(fmt.Sprintf("üìç *–ê–¥—Ä–µ—Å:* %s\n", detail.Address))
	}

	if detail.City != "" {
		builder.WriteString(fmt.Sprintf("üèôÔ∏è *–ì–æ—Ä–æ–¥:* %s\n", detail.City))
	}

	if detail.FullDescription != "" {
		builder.WriteString(fmt.Sprintf("\nüìñ *–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n", detail.FullDescription))
	} else if detail.Description != "" {
		builder.WriteString(fmt.Sprintf("\nüìñ *–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n", detail.Description))
	}

	if detail.WorkingHours != "" {
		builder.WriteString(fmt.Sprintf("üïí *–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:* %s\n", detail.WorkingHours))
	}

	if detail.Phone != "" {
		builder.WriteString(fmt.Sprintf("üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* %s\n", detail.Phone))
	}

	if detail.Website != "" {
		builder.WriteString(fmt.Sprintf("üåê *–°–∞–π—Ç:* %s\n", detail.Website))
	}

	if detail.Cost != "" {
		builder.WriteString(fmt.Sprintf("üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* %s\n", detail.Cost))
	}

	if detail.Rating > 0 {
		builder.WriteString(fmt.Sprintf("\n‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* %.1f/5\n", detail.Rating))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
	if detail.MainPhotoURL != "" {
		builder.WriteString(fmt.Sprintf("\nüì∏ [–§–æ—Ç–æ](%s)", detail.MainPhotoURL))
	}

	return builder.String()
}

func createAttractionsKeyboard(attrs []models.Attraction) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, attr := range attrs {
		btn := tgbotapi.NewInlineKeyboardButtonData(
			attr.Name,
			"attraction_"+strconv.Itoa(attr.ID),
		)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}
