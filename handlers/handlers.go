// handlers/handlers.go
package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"tg-bot/api"
	"tg-bot/models"
	"unicode/utf8"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –î–æ–±–∞–≤–∏–º —Ç–∏–ø –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
type SearchType int

const (
	SearchTypeCity SearchType = iota
	SearchTypeLocation
)

// –û–±–Ω–æ–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
type PaginationState struct {
	Type        SearchType
	City        string
	Location    *tgbotapi.Location
	Attractions []models.Attraction
	Page        int
	TotalPages  int
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ chatID
var paginationStates = make(map[int64]*PaginationState)

func HandleMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

	if update.Message.Text == "/start" {
		msg.Text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ú–æ—Å–∫–≤–∞\", \"–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\")\nüó∫Ô∏è –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π"
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButtonLocation(" –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"),
			),
		)
	} else {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
		go HandleCity(bot, update)
	}

	bot.Send(msg)
}

// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –≥–æ—Ä–æ–¥—É
func HandleCity(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

	// –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
	cityName := cleanUTF8(update.Message.Text)

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –≥–æ—Ä–æ–¥—É —á–µ—Ä–µ–∑ API
	attractions, err := api.GetAttractionsByCity(cityName)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: %v", err)
		msg.Text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		bot.Send(msg)
		return
	}

	// –û—á–∏—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	for i := range attractions {
		attractions[i].Name = cleanUTF8(attractions[i].Name)
		attractions[i].Address = cleanUTF8(attractions[i].Address)
		attractions[i].Description = cleanUTF8(attractions[i].Description)
		attractions[i].City = cleanUTF8(attractions[i].City)
	}

	if len(attractions) == 0 {
		msg.Text = safeFormat("üèôÔ∏è –í –≥–æ—Ä–æ–¥–µ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π üò¢\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.", cityName)
		bot.Send(msg)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	pageSize := 5
	totalPages := (len(attractions) + pageSize - 1) / pageSize

	paginationStates[update.Message.Chat.ID] = &PaginationState{
		Type:        SearchTypeCity,
		City:        cityName,
		Location:    nil,
		Attractions: attractions,
		Page:        0,
		TotalPages:  totalPages,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
	sendAttractionsPage(bot, update.Message.Chat.ID, 0)
}

// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
func HandleLocation(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –ª–æ–∫–∞—Ü–∏–∏
	attractions, err := api.GetAttractionsByLocation(
		update.Message.Location.Latitude,
		update.Message.Location.Longitude,
		0.01,
	)
	for i := range attractions {
		attractions[i].Name = cleanUTF8(attractions[i].Name)
		attractions[i].Address = cleanUTF8(attractions[i].Address)
		attractions[i].Description = cleanUTF8(attractions[i].Description)
		attractions[i].City = cleanUTF8(attractions[i].City)
	}

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: %v", err)
		msg.Text = " –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."
		bot.Send(msg)
		return
	}

	if len(attractions) == 0 {
		msg.Text = " –†—è–¥–æ–º —Å –≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
		bot.Send(msg)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	pageSize := 5
	totalPages := (len(attractions) + pageSize - 1) / pageSize

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –ª–æ–∫–∞—Ü–∏–∏
	locationCopy := &tgbotapi.Location{
		Latitude:  update.Message.Location.Latitude,
		Longitude: update.Message.Location.Longitude,
	}

	paginationStates[update.Message.Chat.ID] = &PaginationState{
		Type:        SearchTypeLocation,
		City:        "",
		Location:    locationCopy,
		Attractions: attractions,
		Page:        0,
		TotalPages:  totalPages,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
	sendAttractionsPage(bot, update.Message.Chat.ID, 0)
}
func cleanUTF8(s string) string {
	if utf8.ValidString(s) {
		return s
	}

	// –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ UTF8 —Å–∏–º–≤–æ–ª—ã, –æ—á–∏—â–∞–µ–º –∏—Ö
	v := make([]rune, 0, len(s))
	for i, r := range s {
		if r == utf8.RuneError {
			_, size := utf8.DecodeRuneInString(s[i:])
			if size == 1 {
				continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–∏–º–≤–æ–ª
			}
		}
		v = append(v, r)
	}
	return string(v)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
func safeFormat(format string, args ...interface{}) string {
	// –û—á–∏—â–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
	cleanArgs := make([]interface{}, len(args))
	for i, arg := range args {
		if s, ok := arg.(string); ok {
			cleanArgs[i] = cleanUTF8(s)
		} else {
			cleanArgs[i] = arg
		}
	}
	return fmt.Sprintf(format, cleanArgs...)
}

// –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
func sendAttractionsPage(bot *tgbotapi.BotAPI, chatID int64, page int) {
	state, exists := paginationStates[chatID]
	if !exists || len(state.Attractions) == 0 {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	if page < 0 {
		page = 0
	}
	if page >= state.TotalPages {
		page = state.TotalPages - 1
	}

	state.Page = page
	pageSize := 5
	start := page * pageSize
	end := start + pageSize
	if end > len(state.Attractions) {
		end = len(state.Attractions)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
	var header string
	if state.Type == SearchTypeCity {
		header = safeFormat("üèôÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ %s (—Å—Ç—Ä. %d/%d):\n\n",
			state.City, page+1, state.TotalPages)
	} else {
		header = safeFormat("üìç –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏ (—Å—Ç—Ä. %d/%d):\n\n",
			page+1, state.TotalPages)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	var builder strings.Builder
	builder.WriteString(header)

	for i := start; i < end; i++ {
		attr := state.Attractions[i]

		// –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
		cleanName := cleanUTF8(attr.Name)
		cleanAddress := cleanUTF8(attr.Address)
		cleanDescription := cleanUTF8(attr.Description)

		ratingText := ""
		if attr.Rating > 0 {
			ratingText = safeFormat(" (‚≠ê %.1f)", attr.Rating)
		}

		builder.WriteString(safeFormat("%d. %s%s\n", i+1, cleanName, ratingText))

		if cleanAddress != "" {
			builder.WriteString(safeFormat("   üìç %s\n", truncateString(cleanAddress, 50)))
		}

		if cleanDescription != "" {
			builder.WriteString(safeFormat("   üìù %s\n", truncateString(cleanDescription, 50)))
		}

		builder.WriteString("\n")
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
	keyboard := createPaginationKeyboard(page, state.TotalPages, start, end)

	msg := tgbotapi.NewMessage(chatID, builder.String())
	msg.ReplyMarkup = keyboard
	msg.ParseMode = "HTML" // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML parse mode –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	bot.Send(msg)
}

// —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
func createPaginationKeyboard(currentPage, totalPages, start, end int) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	var navButtons []tgbotapi.InlineKeyboardButton

	if currentPage > 0 {
		navButtons = append(navButtons, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("page_%d", currentPage-1)))
	}

	if currentPage < totalPages-1 {
		navButtons = append(navButtons, tgbotapi.NewInlineKeyboardButtonData("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", fmt.Sprintf("page_%d", currentPage+1)))
	}

	if len(navButtons) > 0 {
		rows = append(rows, navButtons)
	}

	// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
	for i := start; i < end; i++ {
		btn := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("üèõÔ∏è %d", i+1),
			fmt.Sprintf("attraction_%d", i),
		)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∏ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
func HandleCallback(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
	bot.Send(callback)

	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "")

	data := update.CallbackQuery.Data

	if strings.HasPrefix(data, "page_") {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
		pageStr := strings.TrimPrefix(data, "page_")
		page, err := strconv.Atoi(pageStr)
		if err == nil {
			sendAttractionsPage(bot, update.CallbackQuery.Message.Chat.ID, page)
		}
		return
	}

	if strings.HasPrefix(data, "attraction_") {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
		indexStr := strings.TrimPrefix(data, "attraction_")
		index, err := strconv.Atoi(indexStr)
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞"
		} else {
			state, exists := paginationStates[update.CallbackQuery.Message.Chat.ID]
			if exists && index >= 0 && index < len(state.Attractions) {
				detail, err := api.GetAttractionDetail(state.Attractions[index].ID)
				if err != nil {
					msg.Text = " –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π"
				} else {
					msg.Text = formatAttractionDetail(detail)
					// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
					msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
						tgbotapi.NewInlineKeyboardRow(
							tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
								fmt.Sprintf("page_%d", state.Page)),
						),
					)
				}
			} else {
				msg.Text = "–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
			}
		}
	}

	bot.Send(msg)
}

func truncateString(s string, maxLength int) string {
	if len(s) <= maxLength {
		return s
	}
	return s[:maxLength-3] + "..."
}

// —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
func formatAttractionDetail(detail models.AttractionDetail) string {
	var builder strings.Builder

	// –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
	cleanName := cleanUTF8(detail.Name)
	cleanAddress := cleanUTF8(detail.Address)
	cleanCity := cleanUTF8(detail.City)
	cleanFullDescription := cleanUTF8(detail.FullDescription)
	cleanDescription := cleanUTF8(detail.Description)
	cleanWorkingHours := cleanUTF8(detail.WorkingHours)
	cleanPhone := cleanUTF8(detail.Phone)
	cleanWebsite := cleanUTF8(detail.Website)
	cleanCost := cleanUTF8(detail.Cost)

	builder.WriteString(safeFormat("<b>üèõÔ∏è %s</b>\n\n", cleanName))

	if cleanAddress != "" {
		builder.WriteString(safeFormat("üìç <b>–ê–¥—Ä–µ—Å:</b> %s\n", cleanAddress))
	}

	if cleanCity != "" {
		builder.WriteString(safeFormat("üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> %s\n", cleanCity))
	}

	if cleanFullDescription != "" {
		builder.WriteString(safeFormat("\nüìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> %s\n", truncateString(cleanFullDescription, 200)))
	} else if cleanDescription != "" {
		builder.WriteString(safeFormat("\nüìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> %s\n", truncateString(cleanDescription, 200)))
	}

	if cleanWorkingHours != "" {
		builder.WriteString(safeFormat("üïí <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> %s\n", cleanWorkingHours))
	}

	if cleanPhone != "" {
		builder.WriteString(safeFormat("üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> %s\n", cleanPhone))
	}

	if cleanWebsite != "" {
		builder.WriteString(safeFormat("üåê <b>–°–∞–π—Ç:</b> %s\n", cleanWebsite))
	}

	if cleanCost != "" {
		builder.WriteString(safeFormat("üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> %s\n", cleanCost))
	}

	if detail.Rating > 0 {
		builder.WriteString(safeFormat("\n‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> %.1f/5\n", detail.Rating))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
	if detail.MainPhotoURL != "" {
		cleanPhotoURL := cleanUTF8(detail.MainPhotoURL)
		builder.WriteString(safeFormat("\nüì∏ <a href=\"%s\">–§–æ—Ç–æ</a>", cleanPhotoURL))
	}

	return builder.String()
}
